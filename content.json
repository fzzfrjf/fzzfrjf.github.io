{"meta":{"title":"fzzf","subtitle":"fzzfの博客","description":"慢慢学习","author":"fzzf","url":"http://fzzfrjf.github.io","root":"/"},"pages":[{"title":"","date":"2022-04-13T02:48:31.745Z","updated":"2022-03-28T02:56:04.000Z","comments":true,"path":"artitalk/index.html","permalink":"http://fzzfrjf.github.io/artitalk/index.html","excerpt":"","text":""},{"title":"archives","date":"2019-10-24T16:00:00.000Z","updated":"2022-03-28T02:55:50.000Z","comments":true,"path":"archives/index.html","permalink":"http://fzzfrjf.github.io/archives/index.html","excerpt":"","text":""},{"title":"关于本站","date":"2020-04-19T04:58:56.000Z","updated":"2022-03-28T02:55:34.000Z","comments":false,"path":"about/index.html","permalink":"http://fzzfrjf.github.io/about/index.html","excerpt":"","text":"fzzfのthought“ 小小的鸡汤 “ 当你在项目中感觉所要学习的人和事越来越多时，说明你在 成长 。 当你感觉要责怪的人和事越来越少时，说明你在 成熟 。 当你在项目中不断获得了友谊和朋友时，说明你将取得项目的 成功 。 联系我B站：fzzf1017（萌新up） QQ：1063131130 （嘀嘀~，麻烦让一下，我要开车了！） 座右铭：既然选择了远方 便只顾风雨兼程"},{"title":"分类","date":"2020-11-24T07:12:19.000Z","updated":"2022-03-28T02:56:22.000Z","comments":false,"path":"categories/index.html","permalink":"http://fzzfrjf.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-06-07T14:17:49.000Z","updated":"2022-03-28T02:57:00.000Z","comments":true,"path":"link/index.html","permalink":"http://fzzfrjf.github.io/link/index.html","excerpt":"","text":""},{"title":"留言板","date":"2020-10-31T02:11:28.000Z","updated":"2022-03-28T02:56:34.000Z","comments":false,"path":"comments/index.html","permalink":"http://fzzfrjf.github.io/comments/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-11-24T07:14:39.000Z","updated":"2021-07-26T14:44:44.000Z","comments":false,"path":"tags/index.html","permalink":"http://fzzfrjf.github.io/tags/index.html","excerpt":"","text":""},{"title":"我的歌单","date":"2019-05-17T08:14:00.000Z","updated":"2021-07-26T13:06:54.000Z","comments":true,"path":"music/index.html","permalink":"http://fzzfrjf.github.io/music/index.html","excerpt":"","text":""},{"title":"相册","date":"2022-04-13T02:48:32.066Z","updated":"2022-03-28T02:57:14.000Z","comments":false,"path":"List/gallery/index.html","permalink":"http://fzzfrjf.github.io/List/gallery/index.html","excerpt":"","text":"壁紙 世俗的欲望 圣嘉然 關於圣嘉然的圖片"},{"title":"","date":"2021-09-28T14:56:14.000Z","updated":"2022-03-27T08:08:28.000Z","comments":false,"path":"List/gallery/shengjiaran/index.html","permalink":"http://fzzfrjf.github.io/List/gallery/shengjiaran/index.html","excerpt":"","text":""},{"title":"","date":"2019-08-10T08:41:10.000Z","updated":"2022-03-28T02:57:26.000Z","comments":false,"path":"List/movies/index.html","permalink":"http://fzzfrjf.github.io/List/movies/index.html","excerpt":"","text":"励志视频"},{"title":"","date":"2021-09-28T14:56:13.000Z","updated":"2021-10-14T02:11:36.000Z","comments":false,"path":"List/gallery/wallpaper/index.html","permalink":"http://fzzfrjf.github.io/List/gallery/wallpaper/index.html","excerpt":"","text":""},{"title":"Music-BBOX","date":"2020-04-23T04:58:56.000Z","updated":"2022-03-28T03:03:56.000Z","comments":false,"path":"List/music/index.html","permalink":"http://fzzfrjf.github.io/List/music/index.html","excerpt":"","text":""}],"posts":[{"title":"java实例对象存储位置","slug":"07-java实例对象存储位置","date":"2022-04-12T14:15:00.000Z","updated":"2022-04-12T15:02:31.276Z","comments":true,"path":"posts/7.html","link":"","permalink":"http://fzzfrjf.github.io/posts/7.html","excerpt":"","text":"java实例对象存储位置在java内存模型中，运行时数据区是java程序得以运行至关重要的区域，主要的作用就是将字节码文件写入内存中，方便后续执行引擎的调用。而运行时数据区分为五个板块，程序计数器，java虚拟机栈，本地方法栈，java堆以及方法区。 程序计数器是一块比较小的内存区域，主要是充当着字节码文件的信号指示器，线程的分支、循环、异常跳出、恢复运行都是依靠着程序计数器对其发号指令。在多线程运行中，实际上就是多个线程不断切换获取cpu执行任务，而每次切换都需要将自己线程的状态存储，就是存储在程序计数器中，因此每一个线程都有其自己私有的程序计数器，程序计数器也是唯一一块没有规定OutOfMemoryError情况的区域。 虚拟机栈也是每个线程私有的，是每个线程方法执行的内存模型，线程在方法执行中，会生成一个栈帧，栈帧里边存储着局部变量表，操作数栈，动态链接，方法出口。线程每一个方法的执行，就是栈帧在虚拟机栈中入栈出栈的过程。因为每个线程执行的方法不同，因此每一个虚拟机栈都是私有的，其生命周期与线程相同。 在栈中放入超过虚拟机要求的长度，就会发生StackOverflowError。如果在栈扩展时不能得到足够的内存则会抛出OutOfMemoryError。 本地方法栈与虚拟机栈类似，都是线程私有的，区别在于虚拟机栈是为执行字节码文件的线程服务的，而本地方法栈则是为调用native方法的线程服务的，本地方法栈同样会抛出StackOverflowError以及OutOfMemoryError。 java堆是运行时数据区中线程共享的内存区域，伴随着jvm开启而创建，其中存放着大部分实例对象。由于垃圾回收机制通常发生在堆中，因此堆又被叫做“GC堆”。由于目前垃圾回收大多采用分代回收机制，因此java堆又被分为新生代与老年代。而根据内存分配的不同又可以将堆空间分为不同线程的私有分配缓冲区。但不管怎么分配，堆中存储的始终是对象实例。不同的分配方式只是为了提高垃圾回收的效率以及内存分配的速度。 jvm规定堆中的内存在物理上可以是不连续的，但是在逻辑上是连续的，内存大小可以是固定的也可以是可扩展的，当实例对象未能成功创建而堆扩展无法拿到足够空间则会抛出OutOfMemoryError。 方法区也是线程共享的区域，其中存放的类信息，常量，静态变量以及即时编译器编译过后的代码数据。jvm规定方法区是一种类堆的结构，但是方法区还有一个别名是“Non-Heap”，就是为了与堆所区分。jvm对于方法区的规定较为轻松，方法区与堆一样可以是固定大小也可以是可扩展的，方法区可以不进行垃圾回收。对于方法区的回收就是常量的回收以及类型的卸载。 通过上边对于运行时数据区的简单描述，可以看出，堆是运行时数据区存放实例对象的区域，但是不是所有对象实例都存在于堆中呢？不是的。 逃逸分析 在《深入理解JVM虚拟机》中是这样写道的： 随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变的不那么“绝对”。 逃逸分析其实就是对于一个新对象的引用范围进行分析从而决定是否分配在堆上。 以下是两个例子分析： /* *不发生逃逸,没有被外部,在方法内创建在方法内销毁 */ public void my_method(){ Person person = new Person(); //do something } //发生了逃逸,StringBuilder的对象实体通过返回值返回,这就有可能被外部使用到 public StringBuilder my_mythod2(){ StringBuilder str = new StringBuilder(); //do something return str; } //不会发生逃逸,我们关注的是在方法中创建的实体本身,也就是str本身是否会被外部的其他方法调用 //显然是不会被外部其他方法调用的 public String my_method3(){ StringBuilder str = new StringBuilder(); //do something return str.toString(); } 上边例子可以总结为 当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。 当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中。 如果未发生逃逸，那么这个对象就可能是栈分配的备选，而不是堆分配。 锁消除 除了对于对象实例是否是进行堆分配时进行逃逸分析，在多线程中经过JIT分析过后发现当前锁对象只能被当前线程所持有而无法传递给其他线程竞争的话，那么就会取消这部分代码的同步，这样能够大大提高并发性和性能。 /** *该部分的锁代码是无效的,因为要锁共享变量的,我们是重新向另一个方向分析 */ public void my_method(){ Person person = new Person(); synchronized(person){ System.out.println(peson); } } 经过逃逸分析后优化为： public void my_method(){ Person person = new Person(); System.out.println(person); } 部分内容转载自csdn：(https://blog.csdn.net/qq_40742223/article/details/109862172)","categories":[{"name":"jvm","slug":"jvm","permalink":"http://fzzfrjf.github.io/categories/jvm/"}],"tags":[{"name":"逃逸分析","slug":"逃逸分析","permalink":"http://fzzfrjf.github.io/tags/%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/"},{"name":"锁消除","slug":"锁消除","permalink":"http://fzzfrjf.github.io/tags/%E9%94%81%E6%B6%88%E9%99%A4/"}]},{"title":"牛客NC3 链表中环的入口结点","slug":"06-寻找链表环入口结点","date":"2022-04-06T15:03:00.000Z","updated":"2022-04-07T01:10:14.000Z","comments":true,"path":"posts/6.html","link":"","permalink":"http://fzzfrjf.github.io/posts/6.html","excerpt":"","text":"牛客NC3 链表中环的入口结点题目如下： 主要思想就是首先利用快慢指针判断是否有环，如果有环，再根据下面的思想让快指针重头开始走，慢指针继续走，走到相遇就是环入口结点的地方： 代码如下： public class Solution { public ListNode EntryNodeOfLoop(ListNode pHead) { ListNode ft = pHead; ListNode fast = pHead; ListNode slow = pHead; while(fast != null &amp;&amp; fast.next != null){ fast = fast.next.next; slow = slow.next; if(fast == slow){ while(slow != ft){ slow = slow.next; ft = ft.next; } return ft; } } return null; } }","categories":[{"name":"算法","slug":"算法","permalink":"http://fzzfrjf.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"解法","slug":"解法","permalink":"http://fzzfrjf.github.io/tags/%E8%A7%A3%E6%B3%95/"},{"name":"链表环","slug":"链表环","permalink":"http://fzzfrjf.github.io/tags/%E9%93%BE%E8%A1%A8%E7%8E%AF/"}]},{"title":"Leetcode37题，解数独","slug":"05-填数组","date":"2022-03-29T05:30:00.000Z","updated":"2022-03-29T05:37:00.000Z","comments":true,"path":"posts/5.html","link":"","permalink":"http://fzzfrjf.github.io/posts/5.html","excerpt":"","text":"Leetcode37:解数独编写一个程序，通过填充空格来解决数独问题。 数独的解法需 遵循如下规则： 数字 1-9 在每一行只能出现一次。数字 1-9 在每一列只能出现一次。数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）数独部分空格内已填入了数字，空白格用 ‘.’ 表示。 主要思想的话就是先创建三个数组来存储每一列每一行每一个块这个字符出现的情况，遍历数独，将每个位置存在的数存入数组，将’.’所在的行列存入一个数组集合。之后调用递归，来对每一个’.’位置的字符进行尝试，如果尝试失败，则进行回溯。题解如下：class Solution { private boolean[][] row = new boolean[9][9]; private boolean[][] col = new boolean[9][9]; private boolean[][][] block = new boolean[3][3][9]; private boolean valid = false; private List&lt;int[]&gt; list = new ArrayList&lt;&gt;(); public void solveSudoku(char[][] board) { for(int i = 0; i &lt; 9;i++){ for(int j = 0;j &lt; 9; j++){ if(board[i][j] == '.') list.add(new int[]{i,j}); else{ int digit = board[i][j] - '0' - 1; row[i][digit] = col[j][digit] = block[i/3][j/3][digit] = true; } } } dfs(board,0); } public void dfs(char[][] board,int num){ if(num == list.size()){ valid = true; return; } int[] temp = list.get(num); int i = temp[0] , j = temp[1]; for(int n = 0;n &lt; 9 &amp;&amp; !valid ;n++){ if(!row[i][n] &amp;&amp; !col[j][n] &amp;&amp; !block[i/3][j/3][n]){ row[i][n] = col[j][n] = block[i/3][j/3][n] = true; board[i][j] = (char)(n + '0' + 1); dfs(board,num+1); row[i][n] = col[j][n] = block[i/3][j/3][n] = false; } } } }","categories":[{"name":"算法","slug":"算法","permalink":"http://fzzfrjf.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"解法","slug":"解法","permalink":"http://fzzfrjf.github.io/tags/%E8%A7%A3%E6%B3%95/"},{"name":"数独","slug":"数独","permalink":"http://fzzfrjf.github.io/tags/%E6%95%B0%E7%8B%AC/"}]},{"title":"Leetcode34题，寻找子元素位置","slug":"04-在排序数组寻找元素的第一个和最后一个位置","date":"2022-03-29T02:37:00.000Z","updated":"2022-03-29T02:46:04.000Z","comments":true,"path":"posts/4.html","link":"","permalink":"http://fzzfrjf.github.io/posts/4.html","excerpt":"","text":"Leetcode34:在排序数组中查找元素的第一个位置和最后一个位置给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。 如果数组中不存在目标值 target，返回 [-1, -1]。要求时间复杂度为logn。 主要思想的话就是寻找大于等于target值在数组中出现的位置，之后再寻找target+1出现的位置，进行判断即可，题解如下：class Solution { public int[] searchRange(int[] nums, int target) { int l = searchBinary(nums,target); int r = searchBinary(nums,target + 1); if(l == nums.length || nums[l] != target){ return new int[]{-1,-1}; } return new int[]{l,r - 1}; } public int searchBinary(int[] nums,int target){ int len = nums.length; int l = 0; int r = len; while(l &lt; r){ int mid = (l + r) &gt;&gt; 1; if(nums[mid] &gt;= target){ r = mid; }else{ l = mid + 1; } } return l; } }","categories":[{"name":"算法","slug":"算法","permalink":"http://fzzfrjf.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"解法","slug":"解法","permalink":"http://fzzfrjf.github.io/tags/%E8%A7%A3%E6%B3%95/"},{"name":"子数组","slug":"子数组","permalink":"http://fzzfrjf.github.io/tags/%E5%AD%90%E6%95%B0%E7%BB%84/"}]},{"title":"KMP算法","slug":"03-KMP算法","date":"2022-03-27T15:03:00.000Z","updated":"2022-03-28T07:38:36.000Z","comments":true,"path":"posts/3.html","link":"","permalink":"http://fzzfrjf.github.io/posts/3.html","excerpt":"","text":"KMP算法指的是字符串模式匹配算法，问题是：在主串T中找到第一次出现完整子串P时的起始位置。kpm算法看了几天勉强看懂，但是过了几天就完全忘了当时怎么想的，所以直接背吧！ class Kmp{ public int findSubString(String t,String p){ int[] next = getNext(p); for(int i = 0, j = 0; i &lt; t.length();i++){ while(j &gt; 0 &amp;&amp; p.charAt(i) != p.charAt(j)) j = next[j - 1]; if(p.charAt(i) == p.charAt(j)) j++; if(j == p.length()) return i - j + 1; } return -1; } public int[] getNext(String p){ int[] next = new int[p.length()]; next[0] = 0; for(int i = 1,j = 0; i &lt; p.length();i++){ while(j &gt; 0 &amp;&amp; p.charAt(i) != p.charAt(j)) j = next[j - 1]; if(p.charAt(i) == p.charAt(j)) j++; next[i] = j; } return next; } }","categories":[{"name":"算法","slug":"算法","permalink":"http://fzzfrjf.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"解法","slug":"解法","permalink":"http://fzzfrjf.github.io/tags/%E8%A7%A3%E6%B3%95/"}]},{"title":"寻找下一个更大序列","slug":"02-寻找下一个大序列数组","date":"2022-03-27T13:37:00.000Z","updated":"2022-03-28T07:37:02.000Z","comments":true,"path":"posts/2.html","link":"","permalink":"http://fzzfrjf.github.io/posts/2.html","excerpt":"","text":"题目：整数数组的一个 排列 就是将其所有成员以序列或线性顺序排列。例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。 例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。而 arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。给你一个整数数组 nums ，找出 nums 的下一个排列。 必须 原地 修改，只允许使用额外常数空间。 来源：力扣（LeetCode） 主要思想就是倒序寻找一个与前面数相邻是大的数（比如nums[i] &gt; nums[i - 1]）此时为了保证交换后的数组是变大了，但是变得不是那么大，可以用此大数前边的较小数去与大数后边的序列的最小数（但是必须大于nums[i - 1]）交换，代码如下。class Solution { public void nextPermutation(int[] nums) { int len = nums.length; for(int i = len - 1;i &gt; 0; i--){ if(nums[i] &gt; nums[i - 1]){ Arrays.sort(nums,i,len); for(int j = i; j &lt; len;j++){ if(nums[j] &gt; nums[i - 1]){ int temp = nums[i - 1]; nums[i - 1] = nums[j]; nums[j] = temp; return; } } } } Arrays.sort(nums); return; } }","categories":[{"name":"算法","slug":"算法","permalink":"http://fzzfrjf.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"解法","slug":"解法","permalink":"http://fzzfrjf.github.io/tags/%E8%A7%A3%E6%B3%95/"}]},{"title":"博客与博主","slug":"01-博客诞生","date":"2022-03-26T13:19:00.000Z","updated":"2022-03-26T13:20:26.000Z","comments":true,"path":"posts/1.html","link":"","permalink":"http://fzzfrjf.github.io/posts/1.html","excerpt":"","text":"相遇皆是缘分 为什么建博客？肿么说了! 纯属个人兴趣，好玩，唉，就是玩!嘻嘻! 会有些成就感吧,拥有一个自己的博客写一些自己感兴趣的事或物,不是一件很酷的事嘛! 展望博客我会整理一些个人所学的知识（java的学习过程以及以后学习到新的技术栈）或生活方面有兴趣的事发到博客上供大家观摩，后边找工作时也会分享一些找工作的经验。 关于博主风中追风，是我一直比较喜欢的一个词语，希望在一生不断前进的道路上，能够乘风而行，不懈怠丝毫，一直向前进，风中追风！ 《自由与爱情》---作者:裴多菲 ​ 生命诚可贵 ​ 爱情价更高 ​ 若为自由故 ​ 二者皆可抛 溜溜球啦！","categories":[{"name":"生活","slug":"生活","permalink":"http://fzzfrjf.github.io/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"想法","slug":"想法","permalink":"http://fzzfrjf.github.io/tags/%E6%83%B3%E6%B3%95/"}]}],"categories":[{"name":"jvm","slug":"jvm","permalink":"http://fzzfrjf.github.io/categories/jvm/"},{"name":"算法","slug":"算法","permalink":"http://fzzfrjf.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"生活","slug":"生活","permalink":"http://fzzfrjf.github.io/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"逃逸分析","slug":"逃逸分析","permalink":"http://fzzfrjf.github.io/tags/%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/"},{"name":"锁消除","slug":"锁消除","permalink":"http://fzzfrjf.github.io/tags/%E9%94%81%E6%B6%88%E9%99%A4/"},{"name":"解法","slug":"解法","permalink":"http://fzzfrjf.github.io/tags/%E8%A7%A3%E6%B3%95/"},{"name":"链表环","slug":"链表环","permalink":"http://fzzfrjf.github.io/tags/%E9%93%BE%E8%A1%A8%E7%8E%AF/"},{"name":"数独","slug":"数独","permalink":"http://fzzfrjf.github.io/tags/%E6%95%B0%E7%8B%AC/"},{"name":"子数组","slug":"子数组","permalink":"http://fzzfrjf.github.io/tags/%E5%AD%90%E6%95%B0%E7%BB%84/"},{"name":"想法","slug":"想法","permalink":"http://fzzfrjf.github.io/tags/%E6%83%B3%E6%B3%95/"}]}